user                    nginx;
error_log               /var/log/nginx/error.log warn;
pid                     /var/run/nginx.pid;
worker_processes        auto;
worker_rlimit_nofile    200000;

events {
  worker_connections  1024;
}

http {
  server_tokens off;

  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  # if client asks to upgrade, add header 'Connection: upgrade'
  map $http_upgrade $connection_upgrade {
      default upgrade;
      ''      close;
  }

  server {
    listen 80;

    # TODO: listen on ipv6
    # TODO: https (and redirect http)
    # TODO: confirm default access logs good (/var/log/niginx/access)

    location /ws {
      # docker overlay network's resolver
      resolver 127.0.0.11;
      resolver_timeout 10s;

      # Nginx wants to do the DNS resolution at startup, and crash if it fails.
      # However it may often fail at startup if the service is also just starting up.
      # So use a variable to force nginx to resolve at request-time.
      set $upstream compile-and-run-service;
      proxy_pass http://$upstream;

      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;

      # TODO: maybe     proxy_read_timeout 86400;
    }

    location / {
      root /data/www;
      try_files $uri /index.html;
    }
  }
}
